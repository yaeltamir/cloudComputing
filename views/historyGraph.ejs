<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>SugarSnap</title>
    <link rel="icon" type="image/x-icon" href="assets/logo3.png" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <link href="css/styles.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* Responsive container */
        .container-fluid {
            width: 100%;
            padding-right: 15px;
            padding-left: 15px;
            margin-right: auto;
            margin-left: auto;
        }

        /* Chart container */
        .chart-container {
            position: relative;
            width: 100%;
            height: 60vh; /* Use viewport height */
            min-height: 300px; /* Minimum height */
            margin: 20px auto;
        }

        /* Form styling */
        .filter-form {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin: 1rem 0;
        }

        .form-group {
            flex: 1 1 200px;
        }

        /* Responsive text */
        .text-gradient {
            font-size: clamp(1.5rem, 4vw, 2.5rem);
        }

        /* Custom tooltip */
        #chartjs-tooltip {
            max-width: 90vw;
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border-radius: 8px;
            pointer-events: none;
        }

        /* Responsive navigation */
        @media (max-width: 768px) {
            .navbar-nav {
                flex-direction: column;
                width: 100%;
                text-align: center;
            }
            
            .form-group {
                flex: 1 1 100%;
            }
        }
    </style>
</head>
<body class="d-flex flex-column h-100">
    <main class="flex-shrink-0">
        <!-- Navigation-->
        <nav class="navbar navbar-expand-lg navbar-light bg-white py-3">
            <div class="container-fluid px-4">
                <a class="navbar-brand" href="home"><span class="fw-bolder text-primary">Home</span></a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ms-auto mb-2 mb-lg-0 small fw-bolder">
                        <li class="nav-item"><a class="nav-link" href="home">Home</a></li>
                        <li class="nav-item"><a class="nav-link" href="meals">Meals</a></li>
                        <li class="nav-item"><a class="nav-link" href="historyGraph">History</a></li>
                        <li class="nav-item"><a class="nav-link" href="updateDetails">Update</a></li>
                        <li class="nav-item"><a class="nav-link" href="messages">Messages</a></li>
                    </ul>
                </div>
            </div>
        </nav>
        <%- include('partials/messageNotification') %>


        <div class="container-fluid px-4">
            <div class="text-center mb-4">
                <h1 class="display-5 fw-bolder mb-0">
                    <span class="text-gradient d-inline">Sugar Level Graph</span>
                </h1>
            </div>

            <form id="filterForm" action="/historyGraph" method="GET" class="filter-form">
                <div class="form-group">
                    <label for="startDate" class="form-label fw-bolder text-primary">Start Date:</label>
                    <input type="date" id="startDate" name="startDate" class="form-control">
                </div>
                <div class="form-group">
                    <label for="endDate" class="form-label fw-bolder text-primary">End Date:</label>
                    <input type="date" id="endDate" name="endDate" class="form-control">
                </div>
                <div class="form-group d-flex align-items-end">
                    <button type="submit" class="btn btn-primary">Filter</button>
                </div>
            </form>

            <div class="chart-container">
                <canvas id="sugarLevelChart"></canvas>
            </div>
        </div>

        <script>
            const dates = <%- JSON.stringify(dates) %>;
            const sugarLevels = <%- JSON.stringify(sugarLevels) %>;
            const mealImages = <%- JSON.stringify(mealImages) %>;


            const formattedDates = dates.map(date => {
                // Split date and time parts
                const [datePart, timePart] = date.split(' ');
                const [day, month, year] = datePart.split('/');
            
                // Create a new date string in the ISO format (YYYY-MM-DD) and parse it
                const isoDate = `${year}-${month}-${day}T${timePart}`;
                const dateObj = new Date(isoDate);
            
                // Check if date is valid and format it to "DD/MM/YYYY" format
                if (!isNaN(dateObj)) {
                    return dateObj.toLocaleDateString('en-GB', {
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit'
                    });
                } else {
                    return 'Invalid Date';
                }
            });
            

            const ctx = document.getElementById('sugarLevelChart').getContext('2d');
            
            // Create responsive chart
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: formattedDates,
                    datasets: [{
                        label: 'Sugar level over time',
                        data: sugarLevels,
                        borderColor: 'rgba(75, 102, 255, 1)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Date',
                                color: 'rgba(75, 102, 255, 1)'
                            },
                            ticks: {
                                maxRotation: 45,
                                minRotation: 45,
                                autoSkip: true,
                                maxTicksLimit: 20
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Sugar level',
                                color: 'rgba(75, 102, 255, 1)'
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            enabled: false,
                            external: function(context) {
                                const tooltipEl = document.getElementById('chartjs-tooltip');
                                
                                if (!tooltipEl) {
                                    const tooltip = document.createElement('div');
                                    tooltip.id = 'chartjs-tooltip';
                                    tooltip.style.position = 'absolute';
                                    tooltip.style.pointerEvents = 'none';
                                    document.body.appendChild(tooltip);
                                }

                                const { tooltip } = context;
                                if (tooltip.opacity === 0) {
                                    tooltipEl.style.opacity = 0;
                                    return;
                                }

                                const index = tooltip.dataPoints[0].dataIndex;
                                const sugarLevel = sugarLevels[index];
                                const date = dates[index];
                                const mealImage = mealImages[index];

                                tooltipEl.innerHTML = `
                                   <div style="text-align: center; padding: 8px; background: rgba(0, 0, 0, 0); color: rgba(75, 192, 192, 1); border-radius: 4px;">
                                        <div>Sugar level: ${sugarLevel}</div>
                                        <div>Date & Time: ${date}</div>
                                        ${mealImage ? `<img src="${mealImage}" alt="Meal Image" style="max-width: 100%; height: auto; max-height: 60px; margin-top: 5px;">` : ''}
                                    </div>
                                `;

                                const position = context.chart.canvas.getBoundingClientRect();
                                tooltipEl.style.left = position.left + window.pageXOffset + tooltip.caretX + 'px';
                                tooltipEl.style.top = position.top + window.pageYOffset + tooltip.caretY + 'px';
                                tooltipEl.style.opacity = 1;
                            }
                        }
                    }
                }
            });

            // Handle window resize
            window.addEventListener('resize', function() {
                const chart = Chart.getChart('sugarLevelChart');
                if (chart) {
                    chart.resize();
                }
            });
        </script>
    </main>
</body>
</html>